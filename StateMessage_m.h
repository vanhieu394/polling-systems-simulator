//
// Generated file, do not edit! Created by opp_msgtool 6.0 from StateMessage.msg.
//

#ifndef __STATEMESSAGE_M_H
#define __STATEMESSAGE_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class StateMessage;
/**
 * Enum generated from <tt>StateMessage.msg:3</tt> by opp_msgtool.
 * <pre>
 * enum MsgType
 * {
 *     SET_SERVER_PHASE = 0;
 *     SET_N = 1;
 *     SET_Q = 2;
 * }
 * </pre>
 */
enum MsgType {
    SET_SERVER_PHASE = 0,
    SET_N = 1,
    SET_Q = 2
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const MsgType& e) { b->pack(static_cast<int>(e)); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, MsgType& e) { int n; b->unpack(n); e = static_cast<MsgType>(n); }

/**
 * Enum generated from <tt>StateMessage.msg:9</tt> by opp_msgtool.
 * <pre>
 * enum ServerPhase
 * {
 *     VACATION = 0;
 *     CONNECTION = 1;
 *     SERVICE = 2;
 * }
 * </pre>
 */
enum ServerPhase {
    VACATION = 0,
    CONNECTION = 1,
    SERVICE = 2
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const ServerPhase& e) { b->pack(static_cast<int>(e)); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, ServerPhase& e) { int n; b->unpack(n); e = static_cast<ServerPhase>(n); }

/**
 * Class generated from <tt>StateMessage.msg:15</tt> by opp_msgtool.
 * <pre>
 * message StateMessage
 * {
 *     MsgType msgType;			// Msg's type
 *     ServerPhase serverPhase;	// Server phase
 *     int queueIndex;				// Queue's index
 *     int q;						// Queue's flag
 *     int n;						// Number of packets in queue
 *     int kc;						// k current (current batch size)
 * }
 * </pre>
 */
class StateMessage : public ::omnetpp::cMessage
{
  protected:
    MsgType msgType = static_cast<MsgType>(-1);
    ServerPhase serverPhase = static_cast<ServerPhase>(-1);
    int queueIndex = 0;
    int q = 0;
    int n = 0;
    int kc = 0;

  private:
    void copy(const StateMessage& other);

  protected:
    bool operator==(const StateMessage&) = delete;

  public:
    StateMessage(const char *name=nullptr, short kind=0);
    StateMessage(const StateMessage& other);
    virtual ~StateMessage();
    StateMessage& operator=(const StateMessage& other);
    virtual StateMessage *dup() const override {return new StateMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual MsgType getMsgType() const;
    virtual void setMsgType(MsgType msgType);

    virtual ServerPhase getServerPhase() const;
    virtual void setServerPhase(ServerPhase serverPhase);

    virtual int getQueueIndex() const;
    virtual void setQueueIndex(int queueIndex);

    virtual int getQ() const;
    virtual void setQ(int q);

    virtual int getN() const;
    virtual void setN(int n);

    virtual int getKc() const;
    virtual void setKc(int kc);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const StateMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, StateMessage& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline StateMessage *fromAnyPtr(any_ptr ptr) { return check_and_cast<StateMessage*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __STATEMESSAGE_M_H

